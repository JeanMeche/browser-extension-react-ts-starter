[{"/Users/kyro/Developer/Work/browser-extension-react-ts-starter/src/popup/src/index.tsx":"1","/Users/kyro/Developer/Work/browser-extension-react-ts-starter/src/popup/src/serviceWorker.ts":"2","/Users/kyro/Developer/Work/browser-extension-react-ts-starter/src/popup/src/App.tsx":"3","/Users/kyro/Developer/Work/browser-extension-react-ts-starter/src/popup/src/metamask.ts":"4"},{"size":520,"mtime":1619686236000,"results":"5","hashOfConfig":"6"},{"size":5444,"mtime":1619686236000,"results":"7","hashOfConfig":"6"},{"size":3427,"mtime":1619730689580,"results":"8","hashOfConfig":"6"},{"size":789,"mtime":1619730687128,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"1m1cxql",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},"/Users/kyro/Developer/Work/browser-extension-react-ts-starter/src/popup/src/index.tsx",[],["20","21"],"/Users/kyro/Developer/Work/browser-extension-react-ts-starter/src/popup/src/serviceWorker.ts",[],"/Users/kyro/Developer/Work/browser-extension-react-ts-starter/src/popup/src/App.tsx",[],"/Users/kyro/Developer/Work/browser-extension-react-ts-starter/src/popup/src/metamask.ts",["22"],"\nimport createMetaMaskProvider from 'metamask-extension-provider';\nimport { provider } from 'web3-core';\nimport Web3 from 'web3';\n\nexport class Metamask {\n    web3: Web3;\n\n    constructor() {\n        const provider = createMetaMaskProvider() as provider;\n        console.log(provider);\n        this.web3 = new Web3(provider);\n    }\n\n    async connect(): Promise<string> {\n        const newAccounts = await this.web3.eth.requestAccounts();\n        console.log(newAccounts[0]);\n        return newAccounts[0];\n    }\n\n    async getAccounts(): Promise<string> {\n        const newAccounts = await this.web3.eth.getAccounts();\n        console.log(newAccounts[0]);\n        return newAccounts[0];\n    }\n\n    async requestPermissions(): Promise<void> {\n        this.web3.eth.accounts.wallet.\n    }\n}",{"ruleId":"23","replacedBy":"24"},{"ruleId":"25","replacedBy":"26"},{"ruleId":null,"fatal":true,"severity":2,"message":"27","line":29,"column":4},"no-native-reassign",["28"],"no-negated-in-lhs",["29"],"Parsing error: Identifier expected.","no-global-assign","no-unsafe-negation"]